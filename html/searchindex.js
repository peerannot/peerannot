Search.setIndex({"docnames": ["datasets", "generated/peerannot.models", "generated/peerannot.models.AUM", "generated/peerannot.models.CoNAL", "generated/peerannot.models.Crowdlayer", "generated/peerannot.models.DS", "generated/peerannot.models.DS_clust", "generated/peerannot.models.GLAD", "generated/peerannot.models.MV", "generated/peerannot.models.NaiveSoft", "generated/peerannot.models.WAUM", "generated/peerannot.models.WAUM_perworker", "generated/peerannot.models.WDS", "generated/peerannot.models.template", "index", "pipeline", "strategies"], "filenames": ["datasets.rst", "generated/peerannot.models.rst", "generated/peerannot.models.AUM.rst", "generated/peerannot.models.CoNAL.rst", "generated/peerannot.models.Crowdlayer.rst", "generated/peerannot.models.DS.rst", "generated/peerannot.models.DS_clust.rst", "generated/peerannot.models.GLAD.rst", "generated/peerannot.models.MV.rst", "generated/peerannot.models.NaiveSoft.rst", "generated/peerannot.models.WAUM.rst", "generated/peerannot.models.WAUM_perworker.rst", "generated/peerannot.models.WDS.rst", "generated/peerannot.models.template.rst", "index.rst", "pipeline.rst", "strategies.rst"], "titles": ["Datasets", "peerannot.models", "peerannot.models.AUM", "peerannot.models.CoNAL", "peerannot.models.Crowdlayer", "peerannot.models.DS", "peerannot.models.DS_clust", "peerannot.models.GLAD", "peerannot.models.MV", "peerannot.models.NaiveSoft", "peerannot.models.WAUM", "peerannot.models.WAUM_perworker", "peerannot.models.WDS", "peerannot.models.template", "Peerannot: learning from crowdsourced labels", "Pipeline", "Strategies"], "terms": {"we": [0, 14, 15], "introduc": [0, 14], "format": [0, 6, 7, 8, 9, 10, 15], "crowdsourc": [0, 15, 16], "can": [0, 14, 16], "reus": 0, "multipl": 0, "context": 0, "each": [0, 2, 5, 6, 7, 9, 10, 11, 12, 15], "i": [0, 2, 5, 10, 11, 14, 15], "folder": [0, 15], "follow": [0, 14], "architectur": 0, "todo": [0, 14, 16], "present": 0, "structur": 0, "modul": [1, 2, 10], "class": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], "__init__": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], "task": [2, 6, 7, 8, 9, 10, 11, 12, 15], "n_class": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "criterion": [2, 3, 4, 10, 11], "optim": [2, 3, 4, 10, 11], "n_epoch": [2, 3, 4, 10, 11], "verbos": [2, 3, 4, 5, 10, 11], "fals": [2, 3, 4, 5, 6, 10, 11], "use_pleiss": [2, 10, 11], "kwarg": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "comput": [2, 5, 6, 8, 10], "score": [2, 7, 10], "paramet": [2, 6, 7, 8, 9, 10, 11], "torch": [2, 10], "dataset": [2, 10, 14, 15], "x_i": [2, 10, 11], "_": [2, 10], "y_i": [2, 10], "j": [2, 5, 10], "int": [2, 6, 7, 8, 9, 10], "number": [2, 5, 6, 7, 8, 9, 10], "possibl": [2, 6, 7, 8, 9, 10], "default": [2, 6, 7, 8, 9, 10, 11, 14, 15], "2": [2, 5, 6, 8, 9, 10, 11, 12], "neural": [2, 10, 14, 15], "network": [2, 10, 14, 15], "us": [2, 5, 6, 7, 10, 11, 14, 15], "loss": [2, 10, 14], "minim": [2, 10], "strategi": [2, 8, 10, 14], "epoch": [2, 10, 15], "bool": [2, 10], "option": [2, 6, 7, 8, 9, 10, 11], "print": [2, 10], "detail": [2, 10], "log": [2, 5, 10], "pleiss": [2, 10], "margin": [2, 5, 10], "instead": [2, 10], "yang": [2, 10], "method": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14], "compute_aum": 2, "get_aum": [2, 10, 11], "make_step": [2, 10, 11], "batch": [2, 10, 11], "One": [2, 5, 6, 10, 11], "step": [2, 10, 11], "index": [2, 10, 11], "0": [2, 4, 6, 10, 11], "_i": [2, 10, 11], "1": [2, 10, 11], "whatev": 2, "label": [2, 6, 7, 8, 9, 10, 11, 12, 15], "3": [2, 5, 10], "return": [2, 5, 6, 7, 8, 9, 10, 11, 12], "tupl": [2, 6, 10, 11], "length": [2, 10, 11], "logit": [2, 10, 11], "target": [2, 10, 11], "ground": [2, 10, 11], "turth": [2, 10, 11], "type": [2, 6, 7, 8, 9, 10, 11, 12], "run": [2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "identif": [2, 10, 11], "tasks_path": [3, 4], "answer": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15], "scale": [3, 4], "1e": [3, 5, 6, 7], "05": [3, 7], "true": [3, 4, 5, 6, 7, 10], "pretrain": [3, 4, 15], "output_nam": [3, 4], "run_epoch": [3, 4], "trainload": [3, 4], "logger": [3, 4], "setup": [3, 4], "conal": 4, "optimizer2": 4, "assumpt": [5, 6], "independ": 5, "worker": [5, 7, 8, 9, 10], "em": [5, 7], "algorithm": [5, 7], "estim": [5, 6], "confus": [5, 6], "matrix": [5, 6], "dawid_sken": 5, "e_step": 5, "indic": [5, 7], "variabl": 5, "see": 5, "eq": 5, "5": [5, 7], "t": 5, "new": 5, "n_task": [5, 6, 7, 9, 10, 11, 12], "n_worker": [5, 6], "denom": 5, "valu": [5, 6, 7], "likelihood": [5, 7], "easili": [5, 14], "get_answ": [5, 6, 7, 8, 9, 10, 11, 12], "get_crowd_matrix": [5, 6], "get_proba": [5, 6, 7, 8, 9, 10, 11, 12], "init_t": 5, "log_likelihood": 5, "m_step": 5, "maxim": 5, "4": [5, 6, 10], "p": 5, "p_j": 5, "_j": 5, "probabl": [5, 7], "instanc": 5, "ha": 5, "respons": 5, "drawn": 5, "random": [5, 6], "pi": 5, "time": 5, "k": [5, 6, 15], "record": 5, "l": [5, 6], "when": 5, "correct": 5, "epsilon": [5, 6, 7], "06": 5, "maxit": [5, 6, 7], "50": [5, 7], "variat": 6, "infer": [6, 7], "per": [6, 7, 8], "dawid_skene_clust": 6, "matric": 6, "dictionnari": [6, 7, 8, 9, 10], "task0": [6, 7, 8, 9, 10], "worker0": [6, 7, 8, 9, 10], "worker1": [6, 7, 8, 9, 10], "task1": [6, 7, 8, 9, 10], "convergence_condit": 6, "elbo_new": 6, "elbo_old": 6, "elbo": 6, "x": [6, 7], "theta": 6, "phi": 6, "rho": 6, "tau": 6, "lambda_": 6, "delta": 6, "10": [6, 15], "argmax": [6, 7, 9, 10, 11, 12], "soft": [6, 7, 9, 10, 11, 12], "hard": [6, 7, 9, 10, 11, 12], "numpi": [6, 7, 8, 9, 10, 11, 12], "ndarrai": [6, 7, 8, 9, 10, 11, 12], "size": [6, 15], "store": 6, "propos": 6, "vote": [6, 8, 9, 11, 12, 14, 15], "get": [6, 7, 8, 9, 10, 11, 12], "distribut": [6, 7, 9, 10, 11, 12], "hyper_parameter_upd": 6, "initialize_paramet": 6, "one_iter": 6, "0001": 6, "100": [6, 7], "d": 6, "float": [6, 7, 10, 11], "converg": 6, "toler": [6, 7], "between": 6, "two": [6, 14], "maximum": [6, 7], "iter": [6, 7], "preval": 6, "np": 6, "variational_upd": 6, "aggreg": [7, 8, 10, 11, 14, 15], "bilinear": 7, "trust": 7, "scalar": 7, "difficulti": 7, "abil": 7, "code": 7, "block": 7, "javascript": 7, "dict": 7, "param": 7, "estep": 7, "evalu": 7, "posterior": 7, "given": 7, "observ": 7, "mstep": 7, "calclogprobl": 7, "item": 7, "arg": 7, "computeq": 7, "calcul": 7, "expect": [7, 14], "joint": 7, "dalpha": 7, "dbeta": 7, "df": 7, "gradient": 7, "vector": 7, "f": 7, "object": 7, "function": 7, "getboundsx": 7, "alpha": [7, 10, 11], "beta": 7, "gradientq": 7, "packx": 7, "via": 7, "hyperparamet": [7, 10, 11], "rel": 7, "chang": [7, 14], "save_difficulti": 7, "path": [7, 14], "unpackx": 7, "major": [8, 9, 11, 12, 14, 15], "most": 8, "compute_baselin": 8, "frequenc": [8, 9, 10, 11, 12], "obtain": 8, "naiv": 9, "thi": [9, 11, 12, 14, 15], "case": [9, 11, 12], "correspond": [9, 11, 12], "stack": 10, "version": 10, "over": 10, "loader": 10, "w": 10, "cut_lowest": [10, 11], "01": [10, 11], "weight": [10, 11, 12], "d_prune": 10, "get_psi1_waum": [10, 11], "get_psi5_waum": [10, 11], "get_psuccess": [10, 11], "proba": [10, 11], "pij": [10, 11], "witout": 10, "redund": 10, "reset": [10, 11], "cut": [10, 11], "off": [10, 11], "quantil": [10, 11], "below": [10, 11], "which": [10, 11], "ar": [10, 11, 14], "remov": [10, 11], "run_d": [10, 11], "data_j": 11, "waum": 11, "crowdmodel": 13, "now": [14, 15], "standard": 14, "practic": 14, "how": [14, 16], "do": 14, "them": [14, 15], "allow": 14, "user": 14, "manipul": 14, "differ": 14, "end": 14, "e2": 14, "order": 14, "produc": 14, "result": 14, "librari": [14, 16], "under": 14, "activ": 14, "develop": 14, "breakabl": 14, "might": 14, "happen": 14, "until": 14, "first": [14, 15], "releas": 14, "add": 14, "some": 14, "color": 14, "link": 14, "refer": 14, "research": 14, "often": 14, "one": 14, "directli": 14, "all": [14, 15], "an": 14, "adapt": 14, "scheme": 14, "paper": 14, "The": [14, 15], "access": 14, "keyword": 14, "cli": 14, "make": 14, "exampl": [14, 15], "among": 14, "avail": [14, 16], "dawid": 14, "skene": 14, "model": 14, "glad": 14, "non": 14, "exhaust": 14, "list": 14, "displai": [14, 16], "agginfo": 14, "onc": 14, "reproduc": 14, "you": [14, 16], "explor": 14, "By": 14, "monitor": 14, "metric": 14, "crossentropi": 14, "train": [14, 15], "valid": 14, "set": 14, "accuraci": 14, "test": [14, 15], "calibr": 14, "error": 14, "ec": 14, "macro": 14, "command": [14, 15], "know": 14, "more": 14, "help": 14, "let": 15, "u": 15, "consid": 15, "cifar": 15, "10h": 15, "need": 15, "instal": 15, "mean": 15, "download": 15, "data": 15, "peerannot": [15, 16], "cifar10h": 15, "py": 15, "creat": 15, "val": 15, "directori": 15, "imag": 15, "readi": 15, "newli": 15, "file": 15, "json": 15, "contain": 15, "from": 15, "": 15, "keep": 15, "simpl": 15, "mv": 15, "have": 15, "left": 15, "simpli": 15, "classifi": 15, "both": 15, "o": 15, "cifar10h_exampl": 15, "n": 15, "labels_cifar": 15, "10h_mv": 15, "npy": 15, "img": 15, "32": 15, "resnet18": 15, "put": 15, "output": 15, "begin": 15, "here": 16, "find": 16}, "objects": {"peerannot": [[1, 0, 0, "-", "models"]], "peerannot.models": [[2, 1, 1, "", "AUM"], [3, 1, 1, "", "CoNAL"], [4, 1, 1, "", "Crowdlayer"], [5, 0, 0, "-", "DS"], [6, 0, 0, "-", "DS_clust"], [7, 1, 1, "", "GLAD"], [8, 1, 1, "", "MV"], [9, 1, 1, "", "NaiveSoft"], [10, 1, 1, "", "WAUM"], [11, 1, 1, "", "WAUM_perworker"], [12, 1, 1, "", "WDS"], [13, 0, 0, "-", "template"]], "peerannot.models.AUM": [[2, 2, 1, "id0", "__init__"], [2, 2, 1, "", "compute_aum"], [2, 2, 1, "", "get_aum"], [2, 2, 1, "", "make_step"], [2, 2, 1, "", "run"]], "peerannot.models.CoNAL": [[3, 2, 1, "id0", "__init__"], [3, 2, 1, "", "run"], [3, 2, 1, "", "run_epoch"], [3, 2, 1, "", "setup"]], "peerannot.models.Crowdlayer": [[4, 2, 1, "id0", "__init__"], [4, 2, 1, "", "run"], [4, 2, 1, "", "run_epoch"], [4, 2, 1, "", "setup"]], "peerannot.models.DS": [[5, 1, 1, "", "Dawid_Skene"]], "peerannot.models.DS.Dawid_Skene": [[5, 2, 1, "", "__init__"], [5, 2, 1, "", "e_step"], [5, 2, 1, "", "get_answers"], [5, 2, 1, "", "get_crowd_matrix"], [5, 2, 1, "", "get_probas"], [5, 2, 1, "", "init_T"], [5, 2, 1, "", "log_likelihood"], [5, 2, 1, "", "m_step"], [5, 2, 1, "", "run"]], "peerannot.models.DS_clust": [[6, 1, 1, "", "Dawid_Skene_clust"]], "peerannot.models.DS_clust.Dawid_Skene_clust": [[6, 2, 1, "", "__init__"], [6, 2, 1, "", "convergence_condition"], [6, 2, 1, "", "elbo"], [6, 2, 1, "", "get_answers"], [6, 2, 1, "", "get_crowd_matrix"], [6, 2, 1, "", "get_probas"], [6, 2, 1, "", "hyper_parameter_update"], [6, 2, 1, "", "initialize_parameter"], [6, 2, 1, "", "one_iteration"], [6, 2, 1, "", "run"], [6, 2, 1, "", "variational_update"]], "peerannot.models.GLAD": [[7, 2, 1, "", "EM"], [7, 2, 1, "", "EStep"], [7, 2, 1, "", "MStep"], [7, 2, 1, "id0", "__init__"], [7, 2, 1, "", "calcLogProbL"], [7, 2, 1, "", "computeQ"], [7, 2, 1, "", "dAlpha"], [7, 2, 1, "", "dBeta"], [7, 2, 1, "", "df"], [7, 2, 1, "", "f"], [7, 2, 1, "", "getBoundsX"], [7, 2, 1, "", "get_answers"], [7, 2, 1, "", "get_probas"], [7, 2, 1, "", "gradientQ"], [7, 2, 1, "", "packX"], [7, 2, 1, "", "run"], [7, 2, 1, "", "save_difficulty"], [7, 2, 1, "", "unpackX"]], "peerannot.models.MV": [[8, 2, 1, "id0", "__init__"], [8, 2, 1, "", "compute_baseline"], [8, 2, 1, "", "get_answers"], [8, 2, 1, "", "get_probas"]], "peerannot.models.NaiveSoft": [[9, 2, 1, "id0", "__init__"], [9, 2, 1, "", "get_answers"], [9, 2, 1, "", "get_probas"]], "peerannot.models.WAUM": [[10, 2, 1, "id0", "__init__"], [10, 2, 1, "", "cut_lowests"], [10, 2, 1, "", "get_answers"], [10, 2, 1, "", "get_aum"], [10, 2, 1, "", "get_probas"], [10, 2, 1, "", "get_psi1_waum"], [10, 2, 1, "", "get_psi5_waum"], [10, 2, 1, "", "get_psuccess"], [10, 2, 1, "", "make_step"], [10, 2, 1, "", "reset"], [10, 2, 1, "", "run"], [10, 2, 1, "", "run_DS"]], "peerannot.models.WAUM_perworker": [[11, 2, 1, "id0", "__init__"], [11, 2, 1, "", "cut_lowests"], [11, 2, 1, "", "get_answers"], [11, 2, 1, "", "get_aum"], [11, 2, 1, "", "get_probas"], [11, 2, 1, "", "get_psi1_waum"], [11, 2, 1, "", "get_psi5_waum"], [11, 2, 1, "", "get_psuccess"], [11, 2, 1, "", "make_step"], [11, 2, 1, "", "reset"], [11, 2, 1, "", "run"], [11, 2, 1, "", "run_DS"]], "peerannot.models.WDS": [[12, 2, 1, "id0", "__init__"], [12, 2, 1, "", "get_answers"], [12, 2, 1, "", "get_probas"], [12, 2, 1, "", "run"]], "peerannot.models.template": [[13, 1, 1, "", "CrowdModel"]], "peerannot.models.template.CrowdModel": [[13, 2, 1, "", "__init__"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"]}, "titleterms": {"dataset": 0, "peerannot": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], "model": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], "aum": 2, "conal": 3, "crowdlay": 4, "d": 5, "dawid": [5, 6], "skene": [5, 6], "1979": 5, "ds_clust": 6, "worker": 6, "cluster": 6, "imomura": 6, "et": 6, "al": 6, "2018": 6, "glad": 7, "mv": 8, "naivesoft": 9, "waum": 10, "waum_perwork": 11, "wd": 12, "templat": 13, "learn": 14, "from": 14, "crowdsourc": 14, "label": 14, "pipelin": 15, "strategi": 16}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Datasets": [[0, "datasets"]], "peerannot.models": [[1, "module-peerannot.models"]], "peerannot.models.AUM": [[2, "peerannot-models-aum"]], "peerannot.models.CoNAL": [[3, "peerannot-models-conal"]], "peerannot.models.Crowdlayer": [[4, "peerannot-models-crowdlayer"]], "peerannot.models.DS": [[5, "module-peerannot.models.DS"]], "Dawid and skene model (1979)": [[5, "dawid-and-skene-model-1979"]], "peerannot.models.DS_clust": [[6, "module-peerannot.models.DS_clust"]], "Dawid and skene model with worker clustering (Imomura et. al 2018)": [[6, "dawid-and-skene-model-with-worker-clustering-imomura-et-al-2018"]], "peerannot.models.GLAD": [[7, "peerannot-models-glad"]], "peerannot.models.MV": [[8, "peerannot-models-mv"]], "peerannot.models.NaiveSoft": [[9, "peerannot-models-naivesoft"]], "peerannot.models.WAUM": [[10, "peerannot-models-waum"]], "peerannot.models.WAUM_perworker": [[11, "peerannot-models-waum-perworker"]], "peerannot.models.WDS": [[12, "peerannot-models-wds"]], "peerannot.models.template": [[13, "module-peerannot.models.template"]], "Peerannot: learning from crowdsourced labels": [[14, "peerannot-learning-from-crowdsourced-labels"]], "Pipeline": [[15, "pipeline"]], "Strategies": [[16, "strategies"]]}, "indexentries": {"module": [[1, "module-peerannot.models"], [5, "module-peerannot.models.DS"], [6, "module-peerannot.models.DS_clust"], [13, "module-peerannot.models.template"]], "peerannot.models": [[1, "module-peerannot.models"]], "aum (class in peerannot.models)": [[2, "peerannot.models.AUM"]], "__init__() (peerannot.models.aum method)": [[2, "id0"], [2, "peerannot.models.AUM.__init__"]], "compute_aum() (peerannot.models.aum method)": [[2, "peerannot.models.AUM.compute_aum"]], "get_aum() (peerannot.models.aum method)": [[2, "peerannot.models.AUM.get_aum"]], "make_step() (peerannot.models.aum method)": [[2, "peerannot.models.AUM.make_step"]], "run() (peerannot.models.aum method)": [[2, "peerannot.models.AUM.run"]], "conal (class in peerannot.models)": [[3, "peerannot.models.CoNAL"]], "__init__() (peerannot.models.conal method)": [[3, "id0"], [3, "peerannot.models.CoNAL.__init__"]], "run() (peerannot.models.conal method)": [[3, "peerannot.models.CoNAL.run"]], "run_epoch() (peerannot.models.conal method)": [[3, "peerannot.models.CoNAL.run_epoch"]], "setup() (peerannot.models.conal method)": [[3, "peerannot.models.CoNAL.setup"]], "crowdlayer (class in peerannot.models)": [[4, "peerannot.models.Crowdlayer"]], "__init__() (peerannot.models.crowdlayer method)": [[4, "id0"], [4, "peerannot.models.Crowdlayer.__init__"]], "run() (peerannot.models.crowdlayer method)": [[4, "peerannot.models.Crowdlayer.run"]], "run_epoch() (peerannot.models.crowdlayer method)": [[4, "peerannot.models.Crowdlayer.run_epoch"]], "setup() (peerannot.models.crowdlayer method)": [[4, "peerannot.models.Crowdlayer.setup"]], "dawid_skene (class in peerannot.models.ds)": [[5, "peerannot.models.DS.Dawid_Skene"]], "__init__() (peerannot.models.ds.dawid_skene method)": [[5, "peerannot.models.DS.Dawid_Skene.__init__"]], "e_step() (peerannot.models.ds.dawid_skene method)": [[5, "peerannot.models.DS.Dawid_Skene.e_step"]], "get_answers() (peerannot.models.ds.dawid_skene method)": [[5, "peerannot.models.DS.Dawid_Skene.get_answers"]], "get_crowd_matrix() (peerannot.models.ds.dawid_skene method)": [[5, "peerannot.models.DS.Dawid_Skene.get_crowd_matrix"]], "get_probas() (peerannot.models.ds.dawid_skene method)": [[5, "peerannot.models.DS.Dawid_Skene.get_probas"]], "init_t() (peerannot.models.ds.dawid_skene method)": [[5, "peerannot.models.DS.Dawid_Skene.init_T"]], "log_likelihood() (peerannot.models.ds.dawid_skene method)": [[5, "peerannot.models.DS.Dawid_Skene.log_likelihood"]], "m_step() (peerannot.models.ds.dawid_skene method)": [[5, "peerannot.models.DS.Dawid_Skene.m_step"]], "peerannot.models.ds": [[5, "module-peerannot.models.DS"]], "run() (peerannot.models.ds.dawid_skene method)": [[5, "peerannot.models.DS.Dawid_Skene.run"]], "dawid_skene_clust (class in peerannot.models.ds_clust)": [[6, "peerannot.models.DS_clust.Dawid_Skene_clust"]], "__init__() (peerannot.models.ds_clust.dawid_skene_clust method)": [[6, "peerannot.models.DS_clust.Dawid_Skene_clust.__init__"]], "convergence_condition() (peerannot.models.ds_clust.dawid_skene_clust method)": [[6, "peerannot.models.DS_clust.Dawid_Skene_clust.convergence_condition"]], "elbo() (peerannot.models.ds_clust.dawid_skene_clust method)": [[6, "peerannot.models.DS_clust.Dawid_Skene_clust.elbo"]], "get_answers() (peerannot.models.ds_clust.dawid_skene_clust method)": [[6, "peerannot.models.DS_clust.Dawid_Skene_clust.get_answers"]], "get_crowd_matrix() (peerannot.models.ds_clust.dawid_skene_clust method)": [[6, "peerannot.models.DS_clust.Dawid_Skene_clust.get_crowd_matrix"]], "get_probas() (peerannot.models.ds_clust.dawid_skene_clust method)": [[6, "peerannot.models.DS_clust.Dawid_Skene_clust.get_probas"]], "hyper_parameter_update() (peerannot.models.ds_clust.dawid_skene_clust method)": [[6, "peerannot.models.DS_clust.Dawid_Skene_clust.hyper_parameter_update"]], "initialize_parameter() (peerannot.models.ds_clust.dawid_skene_clust method)": [[6, "peerannot.models.DS_clust.Dawid_Skene_clust.initialize_parameter"]], "one_iteration() (peerannot.models.ds_clust.dawid_skene_clust method)": [[6, "peerannot.models.DS_clust.Dawid_Skene_clust.one_iteration"]], "peerannot.models.ds_clust": [[6, "module-peerannot.models.DS_clust"]], "run() (peerannot.models.ds_clust.dawid_skene_clust method)": [[6, "peerannot.models.DS_clust.Dawid_Skene_clust.run"]], "variational_update() (peerannot.models.ds_clust.dawid_skene_clust method)": [[6, "peerannot.models.DS_clust.Dawid_Skene_clust.variational_update"]], "em() (peerannot.models.glad method)": [[7, "peerannot.models.GLAD.EM"]], "estep() (peerannot.models.glad method)": [[7, "peerannot.models.GLAD.EStep"]], "glad (class in peerannot.models)": [[7, "peerannot.models.GLAD"]], "mstep() (peerannot.models.glad method)": [[7, "peerannot.models.GLAD.MStep"]], "__init__() (peerannot.models.glad method)": [[7, "id0"], [7, "peerannot.models.GLAD.__init__"]], "calclogprobl() (peerannot.models.glad method)": [[7, "peerannot.models.GLAD.calcLogProbL"]], "computeq() (peerannot.models.glad method)": [[7, "peerannot.models.GLAD.computeQ"]], "dalpha() (peerannot.models.glad method)": [[7, "peerannot.models.GLAD.dAlpha"]], "dbeta() (peerannot.models.glad method)": [[7, "peerannot.models.GLAD.dBeta"]], "df() (peerannot.models.glad method)": [[7, "peerannot.models.GLAD.df"]], "f() (peerannot.models.glad method)": [[7, "peerannot.models.GLAD.f"]], "getboundsx() (peerannot.models.glad method)": [[7, "peerannot.models.GLAD.getBoundsX"]], "get_answers() (peerannot.models.glad method)": [[7, "peerannot.models.GLAD.get_answers"]], "get_probas() (peerannot.models.glad method)": [[7, "peerannot.models.GLAD.get_probas"]], "gradientq() (peerannot.models.glad method)": [[7, "peerannot.models.GLAD.gradientQ"]], "packx() (peerannot.models.glad method)": [[7, "peerannot.models.GLAD.packX"]], "run() (peerannot.models.glad method)": [[7, "peerannot.models.GLAD.run"]], "save_difficulty() (peerannot.models.glad method)": [[7, "peerannot.models.GLAD.save_difficulty"]], "unpackx() (peerannot.models.glad method)": [[7, "peerannot.models.GLAD.unpackX"]], "mv (class in peerannot.models)": [[8, "peerannot.models.MV"]], "__init__() (peerannot.models.mv method)": [[8, "id0"], [8, "peerannot.models.MV.__init__"]], "compute_baseline() (peerannot.models.mv method)": [[8, "peerannot.models.MV.compute_baseline"]], "get_answers() (peerannot.models.mv method)": [[8, "peerannot.models.MV.get_answers"]], "get_probas() (peerannot.models.mv method)": [[8, "peerannot.models.MV.get_probas"]], "naivesoft (class in peerannot.models)": [[9, "peerannot.models.NaiveSoft"]], "__init__() (peerannot.models.naivesoft method)": [[9, "id0"], [9, "peerannot.models.NaiveSoft.__init__"]], "get_answers() (peerannot.models.naivesoft method)": [[9, "peerannot.models.NaiveSoft.get_answers"]], "get_probas() (peerannot.models.naivesoft method)": [[9, "peerannot.models.NaiveSoft.get_probas"]], "waum (class in peerannot.models)": [[10, "peerannot.models.WAUM"]], "__init__() (peerannot.models.waum method)": [[10, "id0"], [10, "peerannot.models.WAUM.__init__"]], "cut_lowests() (peerannot.models.waum method)": [[10, "peerannot.models.WAUM.cut_lowests"]], "get_answers() (peerannot.models.waum method)": [[10, "peerannot.models.WAUM.get_answers"]], "get_aum() (peerannot.models.waum method)": [[10, "peerannot.models.WAUM.get_aum"]], "get_probas() (peerannot.models.waum method)": [[10, "peerannot.models.WAUM.get_probas"]], "get_psi1_waum() (peerannot.models.waum method)": [[10, "peerannot.models.WAUM.get_psi1_waum"]], "get_psi5_waum() (peerannot.models.waum method)": [[10, "peerannot.models.WAUM.get_psi5_waum"]], "get_psuccess() (peerannot.models.waum method)": [[10, "peerannot.models.WAUM.get_psuccess"]], "make_step() (peerannot.models.waum method)": [[10, "peerannot.models.WAUM.make_step"]], "reset() (peerannot.models.waum method)": [[10, "peerannot.models.WAUM.reset"]], "run() (peerannot.models.waum method)": [[10, "peerannot.models.WAUM.run"]], "run_ds() (peerannot.models.waum method)": [[10, "peerannot.models.WAUM.run_DS"]], "waum_perworker (class in peerannot.models)": [[11, "peerannot.models.WAUM_perworker"]], "__init__() (peerannot.models.waum_perworker method)": [[11, "id0"], [11, "peerannot.models.WAUM_perworker.__init__"]], "cut_lowests() (peerannot.models.waum_perworker method)": [[11, "peerannot.models.WAUM_perworker.cut_lowests"]], "get_answers() (peerannot.models.waum_perworker method)": [[11, "peerannot.models.WAUM_perworker.get_answers"]], "get_aum() (peerannot.models.waum_perworker method)": [[11, "peerannot.models.WAUM_perworker.get_aum"]], "get_probas() (peerannot.models.waum_perworker method)": [[11, "peerannot.models.WAUM_perworker.get_probas"]], "get_psi1_waum() (peerannot.models.waum_perworker method)": [[11, "peerannot.models.WAUM_perworker.get_psi1_waum"]], "get_psi5_waum() (peerannot.models.waum_perworker method)": [[11, "peerannot.models.WAUM_perworker.get_psi5_waum"]], "get_psuccess() (peerannot.models.waum_perworker method)": [[11, "peerannot.models.WAUM_perworker.get_psuccess"]], "make_step() (peerannot.models.waum_perworker method)": [[11, "peerannot.models.WAUM_perworker.make_step"]], "reset() (peerannot.models.waum_perworker method)": [[11, "peerannot.models.WAUM_perworker.reset"]], "run() (peerannot.models.waum_perworker method)": [[11, "peerannot.models.WAUM_perworker.run"]], "run_ds() (peerannot.models.waum_perworker method)": [[11, "peerannot.models.WAUM_perworker.run_DS"]], "wds (class in peerannot.models)": [[12, "peerannot.models.WDS"]], "__init__() (peerannot.models.wds method)": [[12, "id0"], [12, "peerannot.models.WDS.__init__"]], "get_answers() (peerannot.models.wds method)": [[12, "peerannot.models.WDS.get_answers"]], "get_probas() (peerannot.models.wds method)": [[12, "peerannot.models.WDS.get_probas"]], "run() (peerannot.models.wds method)": [[12, "peerannot.models.WDS.run"]], "crowdmodel (class in peerannot.models.template)": [[13, "peerannot.models.template.CrowdModel"]], "__init__() (peerannot.models.template.crowdmodel method)": [[13, "peerannot.models.template.CrowdModel.__init__"]], "peerannot.models.template": [[13, "module-peerannot.models.template"]]}})